import numpy as np
from lazy_susan import *
from more_lazy_susan import *

# This fn will use numpy array to generate a n by n table. If n == 2, generate a 4 by 4 table as given in
# the pdf. Generate 2*n table.
def matrix_iter(n):
    table = np.array([1])
    if n == 0:
        return table
    
    for i in range(n,0,-1):
        A = np.array(table) 
        row_1 = np.hstack((A,A))
        row_2 = np.hstack((A,A*0))
        table = np.vstack((row_1,row_2))
    return table
        
# This will take in the matrix generated by matrix_iter and generate the steps in tuple format (converted by map.
# for coins == 4, aka table_size == 4, this will generate the ABA C ABA sequence (7 steps)

def solver_tuple_iter(table):
    table_size = get_table_size(table)
    
    if table_size == 0 or table_size == 1:
        return []

    n = int(log(table_size)/log(2))
    matrix = matrix_iter(n)
    index_last_row = 2**n - 1
    
    def inner_fn(n):

        left = [matrix[1]]

        if n == 1:
            return left

        for i in range(1, n):
            result = left + [matrix[i+1]] + left
            left = result
            
        return result 

    return inner_fn(index_last_row)

# the solver takes the tuple form instruction from solver_tuple_iter and applies it to every element while
# checking if its solved in the process.

def solve(table):
    master_tuple = solver_tuple_iter(table)
    counter = 0
    for element in master_tuple:
        if not check_solved(table):
            flip_coins(table, element)
            counter += 1
        else:
            break
    return counter 

# below are the tests,
t0_5 = create_table(0)
print("START:", get_table_state(t0_5))
print("Moves: ", solve(t0_5))
print("END:  ", get_table_state(t0_5))
print("----------------------")
t1_5 = create_table(1)
print("START:", get_table_state(t1_5))
print("Moves: ", solve(t1_5))
print("END:  ", get_table_state(t1_5))
print("----------------------")
t2_5 = create_table(2)
print("START:", get_table_state(t2_5))
print("Moves: ", solve(t2_5))
print("END:  ", get_table_state(t2_5))
print("----------------------")
t4_5 = create_table(4)
print("START:",get_table_state(t4_5))
print("Moves: ",solve(t4_5))
print("END:  ",get_table_state(t4_5))
print("----------------------")
t8_5 = create_table(8)
print("START:",get_table_state(t8_5))
print("Moves: ",solve(t8_5))
print("END:  ",get_table_state(t8_5))
print("----------------------")
t16_5 = create_table(16)
print("START:",get_table_state(t16_5))
print("Moves: ",solve(t16_5))
print("END:  ",get_table_state(t16_5))
print("----------------------")
t10_5 = create_table(2)
print("START:", get_table_state(t10_5))
print("Moves: ", solve(t10_5))
print("END:  ", get_table_state(t10_5))
print("----------------------")
