#
# CS1010X --- Programming Methodology
#
# Mission 7 - Sidequest 1
#
# Note that written answers are commented out to allow us to run your
# code easily while grading your problem set.

from lazy_susan import *

##########
# Task 1 #
##########

def solve_trivial_2(table):
    table_state = get_table_state(table)
    flip_coins(table, table_state)

# test:
t2_1 = create_table(2)
solve_trivial_2(t2_1)
print(check_solved(t2_1))


########################################################
## VISUALIZATION ALTERNATIVE
## Run the following two lines below to see how the
## coins on the table are flipped and rotated.

#t2_1_run = create_table(2)
#run(t2_1_run, solve_trivial_2)

########################################################
## GUI ALTERNATIVE
## Run the following two lines below to use the
## interactive GUI to solve the table instead.

#t2_1_susan = create_table(2)
#Susan(t2_1_susan)

########################################################

##########
# Task 2 #
##########

def solve_trivial_4(table):
    table_state = get_table_state(table)
    flip_coins(table, table_state)

# test:
t4_2 = create_table(4)
solve_trivial_4(t4_2)
print(check_solved(t4_2))


########################################################
## VISUALIZATION ALTERNATIVE
## Run the following two lines below to see how the
## coins on the table are flipped and rotated.

#t4_2_run = create_table(4)
#run(t4_2_run, solve_trivial_4)

########################################################
## GUI ALTERNATIVE
## Run the following two lines below to use the
## interactive GUI to solve the table instead.

#t4_2_susan = create_table(4)
#Susan(t4_2_susan)

########################################################

##########
# Task 3 #
##########

def solve_2(table):
    if not check_solved(table):
        flip_coins(table, (0,1))

# test:
t2_3 = create_table(2)
solve_2(t2_3)
print(check_solved(t2_3))


########################################################
## VISUALIZATION ALTERNATIVE
## Run the following two lines below to see how the
## coins on the table are flipped and rotated.

#t2_3_run = create_table(2)
#run(t2_3_run, solve_2)

########################################################
## GUI ALTERNATIVE
## Run the following two lines below to use the
## interactive GUI to solve the table instead.

# t2_3_susan = create_table(2)
# Susan(t2_3_susan)

########################################################





##########
# Task 4 #
##########

def solve_4(table):
    if not check_solved(table):
        flip_coins(table, (1,0,1,0))
        if not check_solved(table):
            flip_coins(table, (1,1,0,0))
            if not check_solved(table):
                flip_coins(table, (1,0,1,0))
                if not check_solved(table):
                    flip_coins(table, (1,0,0,0))
                    if not check_solved(table):
                        flip_coins(table, (1,0,1,0))
                        if not check_solved(table):
                            flip_coins(table, (1,1,0,0))
                            if not check_solved(table):
                                flip_coins(table, (1,0,1,0))


# test:
#t4_4 = create_table(4)
#solve_4(t4_4)
#print(check_solved(t4_4))


########################################################
## VISUALIZATION ALTERNATIVE
## Run the following two lines below to see how the
## coins on the table are flipped and rotated.

#t4_4_run = create_table(4)
#run(t4_4_run, solve_4)

########################################################
## GUI ALTERNATIVE
## Run the following two lines below to use the
## interactive GUI to solve the table instead.

# t4_4_susan = create_table(4)
# Susan(t4_4_susan)

########################################################





##########
# Task 5 #
##########
##########
# Task 5 #
##########
import numpy
np = numpy

# This fn will use numpy array to generate a n by n table. If n == 2, generate a 4 by 4 table as given in
# the pdf. Generate 2*n table.
def matrix_iter(n):
    table = np.array([1])
    if n == 0:
        return np.array([1])
    
    for i in range(n,0,-1):
        A = np.array(table) 
        row_1 = np.hstack((A,A))
        row_2 = np.hstack((A,A*0))
        table = np.vstack((row_1,row_2))
    return table
        
# This will take in the matrix generated by matrix_iter and generate the steps in tuple format (converted by map.
# for coins == 4, aka table_size == 4, this will generate the ABA C ABA sequence (7 steps)
def solver_tuple_iter(n):
    
    n = int(log(n)/log(2))
    if n == 0:
        return (1,)
    
    matrix = tuple(map(tuple, matrix_iter(n).tolist()))
    index_last_row = 2**n - 1
    
    def inner_fn(n):

        if n == 1:
            return (matrix[1],)

        left = (matrix[1],)
        middle = (matrix[2],)

        for i in range(1, n):
            result = left + (matrix[i+1],) + left
            left = result
            
        return result 
        
    return inner_fn(index_last_row)

# the solver takes the tuple form instruction from solver_tuple_iter and applies it to every element while
# checking if its solved in the process.

def solve(table):
    n = get_table_size(table)
    x = 2**(n-1)- 1
    master_tuple = solver_tuple_iter(n)
    counter = 0
    for element in master_tuple:
        if not check_solved(table):
            flip_coins(table, element)
            counter += 1
    print(counter)
    if x == 1:
        return "Solved within " + str(x) + " move!"
    else:
        return "Solved within " + str(x) + " moves!"
# below are the tests,
t1_5 = create_table(1)
print("START: ", get_table_state(t1_5))
print("Max of moves: ", solve(t1_5))
print("END: ", get_table_state(t1_5))
print("----------------------")
t2_5 = create_table(2)
print("START: ", get_table_state(t2_5))
print("Max of moves: ", solve(t2_5))
print("END: ", get_table_state(t2_5))
print("----------------------")
t4_5 = create_table(4)
print("START: ",get_table_state(t4_5))
print("Max of moves: ",solve(t4_5))
print("END: ",get_table_state(t4_5))
print("----------------------")
t8_5 = create_table(8)
print("START: ",get_table_state(t8_5))
print("Max of moves: ",solve(t8_5))
print("END: ",get_table_state(t8_5))
print("----------------------")
t16_5 = create_table(16)
print("START: ",get_table_state(t16_5))
print("Max of moves: ",solve(t16_5))
print("END: ",get_table_state(t16_5))
print("----------------------")

x = lambda x:create_table(x)
run(x(8) , solve)
